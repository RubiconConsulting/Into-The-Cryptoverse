// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

import {Script} from "forge-std/Script.sol";
import {console} from "forge-std/console.sol";
import {StoreSwitch} from "@latticexyz/store/src/StoreSwitch.sol";

import {IWorld} from "../src/codegen/world/IWorld.sol";
import {EncounterTrigger, MapConfig, Position, Dice} from "../src/codegen/index.sol";
import {BlockType} from "../src/codegen/common.sol";
import {positionToEntityKey} from "../src/positionToEntityKey.sol";

contract PostDeploy is Script {
    function run(address worldAddress) external {
        // Specify a store so that you can use tables directly in PostDeploy
        StoreSwitch.setStoreAddress(worldAddress);

        // Load the private key from the `PRIVATE_KEY` environment variable (in .env)
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");

        // Start broadcasting transactions from the deployer account
        vm.startBroadcast(deployerPrivateKey);
        BlockType S = BlockType.Standard;
        BlockType F = BlockType.Flash;
        BlockType A = BlockType.Action;
        BlockType T = BlockType.Trap;
        BlockType Q = BlockType.Question;

        // init the map with the following block types
        // TODO - this is a hardcoded map, make it auto-generated by a seed,seed can generated by Chainlink VRF
        BlockType[20][20] memory map = [
            [S, Q, S, Q, Q, S, T, Q, Q, Q, Q, S, S, S, S, S, S, S, S, S],
            [S, S, T, S, S, S, S, S, T, S, S, S, S, F, S, S, S, S, S, S],
            [S, T, T, T, T, S, S, S, S, S, S, S, S, S, S, T, T, S, S, S],
            [S, S, T, T, T, T, S, S, S, S, F, S, S, S, S, S, T, S, S, S],
            [S, S, S, S, T, T, S, S, S, S, S, S, S, S, S, S, S, T, S, S],
            [S, S, S, F, F, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
            [S, T, S, S, S, F, F, S, S, S, S, T, S, S, S, S, S, F, S, S],
            [S, S, T, T, S, S, S, S, S, T, S, F, S, S, T, S, F, S, S, S],
            [S, S, T, S, S, S, S, T, T, T, S, F, F, S, S, S, S, S, S, S],
            [S, S, S, S, S, S, S, T, T, T, S, F, T, S, T, T, S, S, S, S],
            [S, F, S, S, S, F, S, S, T, A, S, F, S, S, T, T, S, S, S, S],
            [S, S, F, S, S, S, T, S, T, T, S, S, F, T, T, T, S, S, S, S],
            [S, S, F, F, S, S, S, S, T, S, S, S, F, S, T, S, S, S, S, S],
            [S, S, S, F, F, S, S, S, S, S, S, S, S, F, S, T, S, S, S, S],
            [S, S, S, S, F, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
            [S, S, S, S, S, S, S, S, S, S, F, F, S, S, T, S, S, S, S, S],
            [S, S, S, S, T, S, S, S, T, F, S, S, S, T, T, S, F, S, S, S],
            [S, S, S, T, S, T, Q, T, S, S, S, S, S, T, S, S, S, S, S, S],
            [S, S, S, T, T, T, T, S, S, S, S, T, S, S, S, T, S, S, S, S],
            [S, Q, S, S, Q, Q, S, S, S, S, S, S, S, Q, S, S, S, S, S, S]
        ];

        uint32 height = uint32(map.length);
        uint32 width = uint32(map[0].length);
        bytes memory terrain = new bytes(width * height);

        for (uint32 y = 0; y < height; y++) {
            for (uint32 x = 0; x < width; x++) {
                BlockType blockType = map[y][x];
                if (blockType == BlockType.Standard) continue;

                terrain[(y * width) + x] = bytes1(uint8(blockType));
                bytes32 entity = positionToEntityKey(uint32(x), uint32(y));
                if (blockType == BlockType.Question) {
                    Position.set(entity, x, y, y * width + x);
                    EncounterTrigger.set(entity, true);
                }
            }
        }
        //  acturlPositions kind like this
        //     [400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381],
        //     [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380],
        //     [360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341],
        //     [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340],
        //     [320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301],
        //     [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300],
        //     [280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261],
        //     [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
        //     [240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221],
        //     [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
        //     [200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181],
        //     [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
        //     [160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141],
        //     [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
        //     [120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101],
        //     [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        //     [80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61],
        //     [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
        //     [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21],
        //     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        //
        uint32[20][20] memory acturlPositions;
        uint32 position = 400;
        for (uint32 y = 0; y < height; y++) {
            if (y % 2 == 0) {
                // For even rows, assign positions from right to left.
                for (uint32 x = width; x > 0; x--) {
                    acturlPositions[y][x - 1] = position--;
                    console.log(acturlPositions[y][x - 1]);
                }
            } else {
                // For odd rows, assign positions from left to right.
                for (uint32 x = 0; x < width; x++) {
                    acturlPositions[y][x] = position--;
                    console.log(acturlPositions[y][x]);
                }
            }
            console.log("/n");
        }
        // 创建一个新的字节数组来存储每个位置的数字
        bytes memory pathIndex = new bytes(width * height);

        // 在循环中，将每个位置的数字存储到 `positions` 数组中
        for (uint32 y = 0; y < height; y++) {
            for (uint32 x = 0; x < width; x++) {
                // 计算位置的数字
                uint32 acturlPosition = acturlPositions[x][y];

                // 将位置的数字转换为字节，并存储到 `positions` 数组中
                pathIndex[y * width + x] = bytes1(uint8(acturlPosition));
            }
        }
        MapConfig.set(width, height, terrain, pathIndex);
        vm.stopBroadcast();
    }
}
